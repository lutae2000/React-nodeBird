{"ast":null,"code":"import _regeneratorRuntime from \"/Users/uitae/react-nodebird/prepare/front/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport axios from 'axios';\nimport { delay, put, takeLatest, all, fork } from '@redux-saga/core/effects';\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 3:\n          _context.next = 9;\n          break;\n\n        case 5:\n          _context.prev = 5;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 9;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.result.data\n          });\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 5]]);\n}\n\nfunction addPostAPI(data) {\n  return axios.post('api/post', data);\n} //takeEvery는 while 돌리는것처럼 매번 실행\n//takeLatest는 짧은시간내 여러번 이벤트 발생해도 맨 마지막것만 실행\n//takeLeading 짧은시간에 여러번의 이벤트시 첫번째것 실행\n\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest('ADD_POST_REQUEST');\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/uitae/react-nodebird/prepare/front/sagas/post.js"],"names":["addPost","watchAddPost","postSaga","axios","delay","put","takeLatest","all","fork","action","type","ADD_POST_SUCCESS","data","result","ADD_POST_FAILURE","addPostAPI","post"],"mappings":";;oDAKUA,O;qDA0BAC,Y;qDAKeC,Q;;AApCzB,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,UAArB,EAAiCC,GAAjC,EAAsCC,IAAtC,QAAkD,0BAAlD;;AAGA,SAAUR,OAAV,CAAkBS,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMJ,GAAG,CAAC;AACNK,YAAAA,IAAI,EAAEC,gBADA;AAENC,YAAAA,IAAI,EAAEC,MAAM,CAACD;AAFP,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQQ,iBAAMP,GAAG,CAAC;AACNK,YAAAA,IAAI,EAAEI,gBADA;AAENF,YAAAA,IAAI,EAAE,YAAIC,MAAJ,CAAWD;AAFX,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAASG,UAAT,CAAoBH,IAApB,EAA0B;AACtB,SAAOT,KAAK,CAACa,IAAN,CAAW,UAAX,EAAuBJ,IAAvB,CAAP;AACH,C,CAGD;AACA;AACA;;;AAIA,SAAUX,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMK,UAAU,CAAC,kBAAD,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUJ,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMK,GAAG,CAAC,CACNC,IAAI,CAACP,YAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from 'axios';\n\nimport { delay, put, takeLatest, all, fork } from '@redux-saga/core/effects';\n\n\nfunction* addPost(action) {\n    try {\n        //const result = yield call(loginAPI, action.data);\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n        });\n    } catch (err) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            data: err.result.data,\n        })\n    }\n}\n\nfunction addPostAPI(data) {\n    return axios.post('api/post', data);\n}\n\n\n//takeEvery는 while 돌리는것처럼 매번 실행\n//takeLatest는 짧은시간내 여러번 이벤트 발생해도 맨 마지막것만 실행\n//takeLeading 짧은시간에 여러번의 이벤트시 첫번째것 실행\n\n\n\nfunction* watchAddPost() {\n    yield takeLatest('ADD_POST_REQUEST');\n}\n\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n    ])\n}"]},"metadata":{},"sourceType":"module"}