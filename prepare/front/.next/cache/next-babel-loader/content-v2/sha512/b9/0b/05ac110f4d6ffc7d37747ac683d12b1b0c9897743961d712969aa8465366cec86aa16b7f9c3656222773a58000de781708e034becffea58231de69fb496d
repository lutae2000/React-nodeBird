{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { FOLLOW_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS } from '../reducers/user';\n\nfunction loginAPI(data) {\n  return axios.post('api/login', data);\n}\n\nfunction logoutAPI() {\n  return axios.post('api/post');\n}\n\nfunction* logout() {\n  try {\n    //const result = yield fork(loginAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      data: err.result.data\n    });\n  }\n}\n\nfunction* login(action) {\n  try {\n    //fork를 사용하면 비동기 처리 결과값 상관없이 쭉 실행\n    //call을 사용하면  결과값 받아와서 처리 진행\n    //예시\n\n    /*\n    axios.post('api/login ').then(\n        () => {\n                yield put({\n                    type: 'LOG_IN_SUCCEED',\n                    data: result.data,\n                })\n            }\n        )\n    */\n    yield delay(1000); //const result = yield call(loginAPI, action.data);\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      data: err.action.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logout);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["/Users/uitae/react-nodebird/prepare/front/sagas/user.js"],"names":["all","delay","fork","put","takeLatest","axios","FOLLOW_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","UNFOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","loginAPI","data","post","logoutAPI","logout","type","result","err","login","action","watchLogin","watchLogOut","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACIC,cADJ,EAEIC,cAFJ,EAGIC,cAHJ,EAIIC,cAJJ,EAKIC,cALJ,EAMIC,cANJ,EAOIC,eAPJ,EAQIC,eARJ,EASIC,eATJ,EAUIC,eAVJ,EAWIC,eAXJ,EAYIC,eAZJ,EAaIC,gBAbJ,EAcIC,gBAdJ,EAeIC,gBAfJ,QAgBO,kBAhBP;;AAkBA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOjB,KAAK,CAACkB,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACH;;AAED,SAASE,SAAT,GAAqB;AACjB,SAAOnB,KAAK,CAACkB,IAAN,CAAW,UAAX,CAAP;AACH;;AAED,UAAUE,MAAV,GAAmB;AACf,MAAI;AACA;AACA,UAAMtB,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAEZ,eADA;AAENQ,MAAAA,IAAI,EAAEK,MAAM,CAACL;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOM,GAAP,EAAY;AACV,UAAMzB,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAEd,eADA;AAENU,MAAAA,IAAI,EAAEM,GAAG,CAACD,MAAJ,CAAWL;AAFX,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUO,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAI;AACA;AACA;AAEA;;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,UAAM7B,KAAK,CAAC,IAAD,CAAX,CAfA,CAgBI;;AACJ,UAAME,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAEf,cADA;AAENW,MAAAA,IAAI,EAAEQ,MAAM,CAACR;AAFP,KAAD,CAAT;AAIH,GArBD,CAqBE,OAAOM,GAAP,EAAY;AACV,UAAMzB,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAEjB,cADA;AAENa,MAAAA,IAAI,EAAEM,GAAG,CAACE,MAAJ,CAAWR;AAFX,KAAD,CAAT;AAIH;AACJ;;AAID,UAAUS,UAAV,GAAuB;AACnB,QAAM3B,UAAU,CAACM,cAAD,EAAiBmB,KAAjB,CAAhB;AACH;;AAED,UAAUG,WAAV,GAAwB;AACpB,QAAM5B,UAAU,CAACS,eAAD,EAAkBY,MAAlB,CAAhB;AACH;;AAED,eAAe,UAAUQ,QAAV,GAAqB;AAChC,QAAMjC,GAAG,CAAC,CACNE,IAAI,CAAC6B,UAAD,CADE,EAEN7B,IAAI,CAAC8B,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n    FOLLOW_FAILURE,\n    FOLLOW_REQUEST,\n    FOLLOW_SUCCESS,\n    LOG_IN_FAILURE,\n    LOG_IN_REQUEST,\n    LOG_IN_SUCCESS,\n    LOG_OUT_FAILURE,\n    LOG_OUT_REQUEST,\n    LOG_OUT_SUCCESS,\n    SIGN_UP_FAILURE,\n    SIGN_UP_REQUEST,\n    SIGN_UP_SUCCESS,\n    UNFOLLOW_FAILURE,\n    UNFOLLOW_REQUEST,\n    UNFOLLOW_SUCCESS,\n} from '../reducers/user';\n\nfunction loginAPI(data) {\n    return axios.post('api/login', data);\n}\n\nfunction logoutAPI() {\n    return axios.post('api/post');\n}\n\nfunction* logout() {\n    try {\n        //const result = yield fork(loginAPI);\n        yield put({\n            type: LOG_OUT_SUCCESS,\n            data: result.data\n        });\n    } catch (err) {\n        yield put({\n            type: LOG_OUT_FAILURE,\n            data: err.result.data,\n        });\n    }\n}\n\nfunction* login(action) {\n    try {\n        //fork를 사용하면 비동기 처리 결과값 상관없이 쭉 실행\n        //call을 사용하면  결과값 받아와서 처리 진행\n        \n        //예시\n        /*\n        axios.post('api/login ').then(\n            () => {\n                    yield put({\n                        type: 'LOG_IN_SUCCEED',\n                        data: result.data,\n                    })\n                }\n            )\n        */\n        yield delay(1000);\n            //const result = yield call(loginAPI, action.data);\n        yield put({\n            type: LOG_IN_SUCCESS,\n            data: action.data\n        });\n    } catch (err) {\n        yield put({\n            type: LOG_IN_FAILURE,\n            data: err.action.data,\n        })\n    }\n}\n\n\n\nfunction* watchLogin() {\n    yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction* watchLogOut() {\n    yield takeLatest(LOG_OUT_REQUEST, logout);\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogin),\n        fork(watchLogOut),\n    ])\n}"]},"metadata":{},"sourceType":"module"}