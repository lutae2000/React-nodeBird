{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction loginAPI(data) {\n  return axios.post('api/login', data);\n}\n\nfunction logoutAPI() {\n  return axios.post('api/post');\n}\n\nfunction* logout() {\n  try {\n    //const result = yield fork(loginAPI);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.result.data\n    });\n  }\n}\n\nfunction* login(action) {\n  try {\n    //fork를 사용하면 비동기 처리 결과값 상관없이 쭉 실행\n    //call을 사용하면  결과값 받아와서 처리 진행\n    //예시\n\n    /*\n    axios.post('api/login ').then(\n        () => {\n                yield put({\n                    type: 'LOG_IN_SUCCEED',\n                    data: result.data,\n                })\n            }\n        )\n    */\n    yield delay(1000); //const result = yield call(loginAPI, action.data);\n\n    yield put({\n      type: LOG_IN_SUCCEED,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      data: err.action.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logout);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["/Users/uitae/react-nodebird/prepare/front/sagas/user.js"],"names":["all","delay","fork","put","takeLatest","axios","loginAPI","data","post","logoutAPI","logout","type","ADD_POST_SUCCESS","result","err","ADD_POST_FAILURE","login","action","LOG_IN_SUCCEED","LOG_IN_FAILURE","watchLogin","LOG_IN_REQUEST","watchLogOut","LOG_OUT_REQUEST","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOF,KAAK,CAACG,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACH;;AAED,SAASE,SAAT,GAAqB;AACjB,SAAOJ,KAAK,CAACG,IAAN,CAAW,UAAX,CAAP;AACH;;AAED,UAAUE,MAAV,GAAmB;AACf,MAAI;AACA;AACA,UAAMP,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAEC,gBADA;AAENL,MAAAA,IAAI,EAAEM,MAAM,CAACN;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOO,GAAP,EAAY;AACV,UAAMX,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAEI,gBADA;AAENR,MAAAA,IAAI,EAAEO,GAAG,CAACD,MAAJ,CAAWN;AAFX,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUS,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAI;AACA;AACA;AAEA;;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,UAAMhB,KAAK,CAAC,IAAD,CAAX,CAfA,CAgBI;;AACJ,UAAME,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAEO,cADA;AAENX,MAAAA,IAAI,EAAEU,MAAM,CAACV;AAFP,KAAD,CAAT;AAIH,GArBD,CAqBE,OAAOO,GAAP,EAAY;AACV,UAAMX,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAEQ,cADA;AAENZ,MAAAA,IAAI,EAAEO,GAAG,CAACG,MAAJ,CAAWV;AAFX,KAAD,CAAT;AAIH;AACJ;;AAOD,UAAUa,UAAV,GAAuB;AACnB,QAAMhB,UAAU,CAACiB,cAAD,EAAiBL,KAAjB,CAAhB;AACH;;AAED,UAAUM,WAAV,GAAwB;AACpB,QAAMlB,UAAU,CAACmB,eAAD,EAAkBb,MAAlB,CAAhB;AACH;;AAED,eAAe,UAAUc,QAAV,GAAqB;AAChC,QAAMxB,GAAG,CAAC,CACNE,IAAI,CAACkB,UAAD,CADE,EAENlB,IAAI,CAACoB,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n\nfunction loginAPI(data) {\n    return axios.post('api/login', data);\n}\n\nfunction logoutAPI() {\n    return axios.post('api/post');\n}\n\nfunction* logout() {\n    try {\n        //const result = yield fork(loginAPI);\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n        });\n    } catch (err) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            data: err.result.data,\n        })\n    }\n}\n\nfunction* login(action) {\n    try {\n        //fork를 사용하면 비동기 처리 결과값 상관없이 쭉 실행\n        //call을 사용하면  결과값 받아와서 처리 진행\n        \n        //예시\n        /*\n        axios.post('api/login ').then(\n            () => {\n                    yield put({\n                        type: 'LOG_IN_SUCCEED',\n                        data: result.data,\n                    })\n                }\n            )\n        */\n        yield delay(1000);\n            //const result = yield call(loginAPI, action.data);\n        yield put({\n            type: LOG_IN_SUCCEED,\n            data: action.data\n        });\n    } catch (err) {\n        yield put({\n            type: LOG_IN_FAILURE,\n            data: err.action.data,\n        })\n    }\n}\n\n\n\n\n\n\nfunction* watchLogin() {\n    yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction* watchLogOut() {\n    yield takeLatest(LOG_OUT_REQUEST, logout);\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogin),\n        fork(watchLogOut),\n    ])\n}"]},"metadata":{},"sourceType":"module"}