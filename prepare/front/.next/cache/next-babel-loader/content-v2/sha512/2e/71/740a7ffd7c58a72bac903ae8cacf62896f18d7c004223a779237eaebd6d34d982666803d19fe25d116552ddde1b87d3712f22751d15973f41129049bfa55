{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { compose, createStore, applyMiddleware } from 'redux';\nimport reducer from '../reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\n\nconst configureStore = context => {\n  const middlewares = [];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["/Users/uitae/react-nodebird/prepare/front/store/configureStore.js"],"names":["createWrapper","compose","createStore","applyMiddleware","reducer","composeWithDevTools","thunkMiddleware","configureStore","context","middlewares","enhancer","store","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,SAAQC,mBAAR,QAAmC,0BAAnC;AACA,OAAOC,eAAP,MAA4B,aAA5B;;AAEA,MAAMC,cAAc,GAAIC,OAAD,IAAY;AAC/B,QAAMC,WAAW,GAAG,EAApB;AACA,QAAMC,QAAQ,GAAG,QACfT,OAAO,CAACE,eAAe,CAAC,GAAGM,WAAJ,CAAhB,CADQ,GAEfJ,mBAAmB,CAACF,eAAe,CAAC,GAAGM,WAAJ,CAAhB,CAFrB;AAGA,QAAME,KAAK,GAAGT,WAAW,CAACE,OAAD,EAAUM,QAAV,CAAzB;AAEA,SAAOC,KAAP;AACH,CARD;;AAUA,MAAMC,OAAO,GAAGZ,aAAa,CAACO,cAAD,EAAiB;AAC1CM,EAAAA,KAAK;AADqC,CAAjB,CAA7B;AAIA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\nimport { compose, createStore, applyMiddleware } from 'redux';\nimport reducer from '../reducers';\nimport {composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\n\nconst configureStore = (context) =>{\n    const middlewares = [];\n    const enhancer = process.env.NODE_ENV === 'production'\n    ? compose(applyMiddleware(...middlewares))\n    : composeWithDevTools(applyMiddleware(...middlewares));\n    const store = createStore(reducer, enhancer);\n\n    return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n    debug: process.env.NODE_ENV === 'development',\n});\n\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}