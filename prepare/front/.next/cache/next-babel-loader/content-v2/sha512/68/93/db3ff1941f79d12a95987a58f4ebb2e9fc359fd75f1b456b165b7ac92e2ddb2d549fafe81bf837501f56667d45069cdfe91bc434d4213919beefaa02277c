{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nimport user from './user';\nimport post from './post';\nconst initialStatus = {\n  name: 'zero cho',\n  age: 29,\n  password: 'babo'\n};\nconst initialState = {\n  user: {},\n  post: {}\n}; //action creater\n\nconst changeNickname = data => {\n  return {\n    type: 'CHANGE_NICKNAME',\n    data: 'booicho'\n  };\n}; //(이전상태, 액션) => 다음상태\n\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      console.log('HYDRATE', action);\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/uitae/react-nodebird/prepare/front/reducers/index.js"],"names":["HYDRATE","user","post","initialStatus","name","age","password","initialState","changeNickname","data","type","rootReducer","state","action","console","log","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,IAAI,EAAE,UADY;AAElBC,EAAAA,GAAG,EAAE,EAFa;AAGlBC,EAAAA,QAAQ,EAAE;AAHQ,CAAtB;AAMA,MAAMC,YAAY,GAAG;AACjBN,EAAAA,IAAI,EAAE,EADW;AAIjBC,EAAAA,IAAI,EAAE;AAJW,CAArB,C,CAWA;;AACA,MAAMM,cAAc,GAAIC,IAAD,IAAU;AAC7B,SAAO;AACHC,IAAAA,IAAI,EAAE,iBADH;AAEHD,IAAAA,IAAI,EAAE;AAFH,GAAP;AAIH,CALD,C,CAOA;;;AACA,MAAME,WAAW,GAAG,CAACC,KAAK,GAACL,YAAP,EAAqBM,MAArB,KAAgC;AAChD,UAAOA,MAAM,CAACH,IAAd;AACI,SAAKV,OAAL;AACIc,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB;AACA,6CAAYD,KAAZ,GAAsBC,MAAM,CAACG,OAA7B;;AAGJ;AACI,aAAOJ,KAAP;AAPR;AASH,CAVD;;AAYA,eAAeD,WAAf","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\nimport user from './user';\nimport post from './post';\n\nconst initialStatus = {\n    name: 'zero cho',\n    age: 29,\n    password: 'babo',\n};\n\nconst initialState = {\n    user: {\n\n    },\n    post: {\n\n    }\n};\n\n\n\n//action creater\nconst changeNickname = (data) => {\n    return {\n        type: 'CHANGE_NICKNAME',\n        data: 'booicho',\n    }\n};\n\n//(이전상태, 액션) => 다음상태\nconst rootReducer = (state=initialState, action) => {\n    switch(action.type){\n        case HYDRATE:\n            console.log('HYDRATE', action);\n            return { ...state, ...action.payload }\n        \n\n        default:\n            return state;\n    }\n};\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}