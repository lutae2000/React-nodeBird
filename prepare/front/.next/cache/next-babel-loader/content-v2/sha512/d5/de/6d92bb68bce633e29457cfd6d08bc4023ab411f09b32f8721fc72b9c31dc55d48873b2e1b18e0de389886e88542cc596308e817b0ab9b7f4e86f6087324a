{"ast":null,"code":"import _regeneratorRuntime from \"/Users/uitae/react-nodebird/prepare/front/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logout),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nfunction loginAPI(data) {\n  return axios.post('api/login', data);\n}\n\nfunction logoutAPI() {\n  return axios.post('api/post');\n}\n\nfunction logout() {\n  return _regeneratorRuntime.wrap(function logout$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return put({\n            type: ADD_POST_SUCCEED,\n            data: result.data\n          });\n\n        case 3:\n          _context.next = 9;\n          break;\n\n        case 5:\n          _context.prev = 5;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 9;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.result.data\n          });\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 5]]);\n}\n\nfunction login(action) {\n  return _regeneratorRuntime.wrap(function login$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: LOG_IN_SUCCEED,\n            data: action.data\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: LOG_IN_FAILURE,\n            data: _context2.t0.action.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOG_OUT_REQUEST, logout);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogin), fork(watchLogOut)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/uitae/react-nodebird/prepare/front/sagas/user.js"],"names":["logout","login","watchLogin","watchLogOut","userSaga","loginAPI","data","axios","post","logoutAPI","put","type","ADD_POST_SUCCEED","result","ADD_POST_FAILURE","action","delay","LOG_IN_SUCCEED","LOG_IN_FAILURE","takeLatest","LOG_IN_REQUEST","LOG_OUT_REQUEST","all","fork"],"mappings":";;oDAQUA,M;qDAgBAC,K;qDAmCAC,U;qDAIAC,W;qDAIeC,Q;;AAnEzB,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOC,KAAK,CAACC,IAAN,CAAW,WAAX,EAAwBF,IAAxB,CAAP;AACH;;AAED,SAASG,SAAT,GAAqB;AACjB,SAAOF,KAAK,CAACC,IAAN,CAAW,UAAX,CAAP;AACH;;AAED,SAAUR,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMU,GAAG,CAAC;AACNC,YAAAA,IAAI,EAAEC,gBADA;AAENN,YAAAA,IAAI,EAAEO,MAAM,CAACP;AAFP,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQQ,iBAAMI,GAAG,CAAC;AACNC,YAAAA,IAAI,EAAEG,gBADA;AAENR,YAAAA,IAAI,EAAE,YAAIO,MAAJ,CAAWP;AAFX,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUL,KAAV,CAAgBc,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBQ,iBAAMC,KAAK,CAAC,IAAD,CAAX;;AAhBR;AAAA;AAkBQ,iBAAMN,GAAG,CAAC;AACNC,YAAAA,IAAI,EAAEM,cADA;AAENX,YAAAA,IAAI,EAAES,MAAM,CAACT;AAFP,WAAD,CAAT;;AAlBR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAuBQ,iBAAMI,GAAG,CAAC;AACNC,YAAAA,IAAI,EAAEO,cADA;AAENZ,YAAAA,IAAI,EAAE,aAAIS,MAAJ,CAAWT;AAFX,WAAD,CAAT;;AAvBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmCA,SAAUJ,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMiB,UAAU,CAACC,cAAD,EAAiBnB,KAAjB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUE,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMgB,UAAU,CAACE,eAAD,EAAkBrB,MAAlB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUI,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMkB,GAAG,CAAC,CACNC,IAAI,CAACrB,UAAD,CADE,EAENqB,IAAI,CAACpB,WAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["function loginAPI(data) {\n    return axios.post('api/login', data);\n}\n\nfunction logoutAPI() {\n    return axios.post('api/post');\n}\n\nfunction* logout() {\n    try {\n        //const result = yield fork(loginAPI);\n        yield put({\n            type: ADD_POST_SUCCEED,\n            data: result.data\n        });\n    } catch (err) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            data: err.result.data,\n        })\n    }\n}\n\n\nfunction* login(action) {\n    try {\n        //fork를 사용하면 비동기 처리 결과값 상관없이 쭉 실행\n        //call을 사용하면  결과값 받아와서 처리 진행\n        \n        //예시\n        /*\n        axios.post('api/login ').then(\n            () => {\n                    yield put({\n                        type: 'LOG_IN_SUCCEED',\n                        data: result.data,\n                    })\n                }\n            )\n        */\n        yield delay(1000);\n            //const result = yield call(loginAPI, action.data);\n        yield put({\n            type: LOG_IN_SUCCEED,\n            data: action.data\n        });\n    } catch (err) {\n        yield put({\n            type: LOG_IN_FAILURE,\n            data: err.action.data,\n        })\n    }\n}\n\n\n\n\n\n\nfunction* watchLogin() {\n    yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction* watchLogOut() {\n    yield takeLatest(LOG_OUT_REQUEST, logout);\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogin),\n        fork(watchLogOut),\n    ])\n}"]},"metadata":{},"sourceType":"module"}